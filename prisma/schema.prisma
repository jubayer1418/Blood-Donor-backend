// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum RequestStatus  {
//   PENDING
//   APPROVED
//   REJECTED
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String       @id @default(uuid())
  name                  String       @unique
  email                 String       @unique
  password              String
  status                Status?      @default(ACTIVATE)
  bloodType             BloodType?
  location              String?
  role                  Role?        @default(USER)
  canDonateBlood        Boolean      @default(false)
  availability          Boolean      @default(true)
  userProfile           UserProfile?
  bloodRequestsMade     Request[]    @relation("requestsMade")
  bloodRequestsReceived Request[]    @relation("requestsReceived")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  @@map("users")
}

// model User {
//  id String @id @default(uuid())
//  name  String
//  email String @unique
//  password String
//  bloodType String
//  location String
//  availability Boolean @default(false)
//  createdAt DateTime @default(now())
//  updatedAt DateTime @updatedAt
//  userProfile UserProfile?
//  donorRequests  Request[] @relation("donorRequests")
//  requesterRequests  Request[] @rel
//  @@map("users")

// }
model UserProfile {
  id               String  @id @default(uuid())
  userId           String  @unique
  bio              String?
  age              Int?
  lastDonationDate String?
  user             User    @relation(fields: [userId], references: [id])
  photoUrl         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userProfile")
}

// model UserProfile {
//    id String @id @default(uuid())
//    userId  String  @unique
//    user User @relation(fields: [userId],references: [id])
//    bio String
//    age Int
//    lastDonationDate String
//    createdAt DateTime @default(now())
//    updatedAt DateTime @updatedAt
//     @@map("userProfile")
// }

model Request {
  id              String        @id @default(uuid())
  requesterId     String
  requester       User          @relation("requestsMade", fields: [requesterId], references: [id])
  donorId         String
  donor           User          @relation("requestsReceived", fields: [donorId], references: [id])
  requestStatus   RequestStatus @default(PENDING)
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String?
  hospitalAddress String
  reason          String?
  time            String?
  additionalInfo  String?
  termsAgreed     Boolean?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("request")
}

// model Request {
//   id String @id @default(uuid())
//   donorId String  
//   donor User @relation("donorRequests",fields: [donorId],references: [id])
//   requesterId String 
//   requester User @relation("requesterRequests",fields: [requesterId],references: [id])
//   phoneNumber String
//   dateOfDonation  String
//   hospitalName  String
//   hospitalAddress   String
//   reason   String
//   requestStatus RequestStatus @default(PENDING)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("request")
// }

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVATE
  DEACTIVATE
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
 id String @id @default(uuid())
 name  String
 email String @unique
 password String
 bloodType String
 location String
 availability Boolean @default(false)
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 userProfile UserProfile?
 donorRequests  Request[] @relation("donorRequests")
 requesterRequests  Request[] @relation("requesterRequests")
  
 @@map("users")
  
}

model Request {
  id String @id @default(uuid())
  donorId String  
  donor User @relation("donorRequests",fields: [donorId],references: [id])
  requesterId String 
  requester User @relation("requesterRequests",fields: [requesterId],references: [id])
  phoneNumber String
  dateOfDonation  String
  hospitalName  String
  hospitalAddress   String
  reason   String
  requestStatus RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("request")
}

model UserProfile {
   id String @id @default(uuid())
   userId  String  @unique
   user User @relation(fields: [userId],references: [id])
   bio String
   age Int
   lastDonationDate String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
    @@map("userProfile")
}

enum RequestStatus  {
  PENDING
  APPROVED
  REJECTED
}